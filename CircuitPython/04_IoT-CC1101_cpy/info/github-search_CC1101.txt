-- (2) todo: Examples
https://github.com/LSatan/SmartRC-CC1101-Driver-Lib
  benutzt: ELECHOUSE_CC1101_SRC_DRV.cpp
g:\arduino-ino\03_m328\CC1101lib(ProtocolAnalyzer)-mitAnsifilter\Rc-Switch_examples\ProtocolAnalyzeDemo\ProtocolAnalyzeDemo.ino
  // D2: pin = 0;  // for Arduino! Receiver on interrupt 0 => that is pin #2

SmartRC-CC1101-Driver-Lib-master\examples\
examples\CC1101 default examples\New_Method_without_GDO
cc1101_New_Receive_method_advanced
cc1101_New_Receive_method_minimal
cc1101_New_Transmitt_method_Hello_World_advanced
cc1101_New_Transmitt_method_Hello_World_minimal
cc1101_New_Transmitt_method_Serial_advanced
cc1101_New_Transmitt_method_Serial_minimal
cc1101_New_Receive_method_advanced\cc1101_New_Receive_method_advanced.ino
cc1101_New_Receive_method_minimal\cc1101_New_Receive_method_minimal.ino
cc1101_New_Transmitt_method_Hello_World_advanced\cc1101_New_Transmitt_method_Hello_World_advanced.ino
cc1101_New_Transmitt_method_Hello_World_minimal\cc1101_New_Transmitt_method_Hello_World_minimal.ino
cc1101_New_Transmitt_method_Serial_advanced\cc1101_New_Transmitt_method_Serial_advanced.ino
cc1101_New_Transmitt_method_Serial_minimal\cc1101_New_Transmitt_method_Serial_minimal.ino

examples\CC1101 default examples\Old_Method_with_GDO
cc1101_Receive_advanced
cc1101_Receive_minimal
cc1101_Transmitt_Hello_World_advanced
cc1101_Transmitt_Hello_World_minimal
cc1101_Transmitt_Serial_advanced
cc1101_Transmitt_Serial_minimal
cc1101_Receive_advanced\cc1101_Receive_advanced.ino
cc1101_Receive_minimal\cc1101_Receive_minimal.ino
cc1101_Transmitt_Hello_World_advanced\cc1101_Transmitt_Hello_World_advanced.ino
cc1101_Transmitt_Hello_World_minimal\cc1101_Transmitt_Hello_World_minimal.ino
cc1101_Transmitt_Serial_advanced\cc1101_Transmitt_Serial_advanced.ino
cc1101_Transmitt_Serial_minimal\cc1101_Transmitt_Serial_minimal.ino


-- (1)
https://github.com/unixb0y/cpy-cc1101
Circuitpython (CPY) + Adafruit M4 Express
code_rx.py / code_tx.py


--
https://github.com/spaceteddy/cc1101
Arduino: Daten werden im EEPROM gespeichert
RPi: kein Circuit Python


--
https://github.com/simonmonk/CC1101_arduino
A clone of the ELECHOUSE_CC1101 http://www.elechouse.com library -> (2)



-- (3) - noch nicht
https://github.com/wladimir-computin/CC1101-ESP-Arduino
benutzt ELECHOUSE_CC1101 Lib (2)



-- noch nicht
https://github.com/Seeed-Studio/RFBee
https://wiki.seeedstudio.com/RFbee_V1.1-Wireless_Arduino_compatible_node/




  --- CC1101+micropython
https://github.com/search?q=CC1101+micropython&type=repositories&s=stars&o=desc


--
https://github.com/erikdelange/ITHO-CVU-controller-in-MicroPython
However, most code is written in C, and I use microcontrollers running MicroPython. So, I converted these C libraries into MicroPython versions.
# Inspired by the CC1101 drivers written in C from:
# https://github.com/letscontrolit/ESPEasyPluginPlayground/
# https://github.com/arjenhiemstra/IthoEcoFanRFT/blob/master/Master/Itho/CC1101.cpp
# https://github.com/SpaceTeddy/CC1101/blob/master/cc1100_raspi.cpp
